---
- name: Modify sysctl entries
  sysctl:
    name: '{{ item.key }}'
    value: '{{ item.value }}'
    sysctl_set: yes
    state: present
    reload: yes
  ignore_errors: True
  with_items:
    - {key: net.bridge.bridge-nf-call-ip6tables, value: 1}
    - {key: net.bridge.bridge-nf-call-iptables,  value: 1}
    - {key: net.ipv4.ip_forward,  value: 1}

- name: Add IP address of all hosts to all hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ item }} {{ hostvars[item].ansible_nodename }}"
    state: present
  when: hostvars[item].ansible_nodename is defined
  with_items: "{{ groups['all'] }}"
  tags: add_hosts

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0
  tags: swap

- name: Disable swap permanently, persist reboots
  replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
    backup: yes
  tags: swap

- name: install utils
  yum:
    name:
      - iproute-tc
      - bind-utils
    state: installed
  tags: install_utils

- name: Install Kubernetes Repository
  copy:
    src: kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
    mode: 0644
  tags: add_kubernetes_repo

- name: Install Kubernetes packages
  yum:
    name:
      - kubelet
      - kubeadm
      - kubectl
    disable_excludes: kubernetes
    state: latest
  tags: install_kubernetes_packages

# Defining cgroup-driver
- name: Define sysconfig kubelet
  template:
    src: "sysconfig_kubelet.j2"
    dest: "/etc/sysconfig/kubelet"
    owner: root
    group: root
  tags: define_sysconfig_kubelet

- name: Start kubelet
  service:
    name: kubelet
    state: started
    enabled: yes
  tags: start_kubelet

- name: Check if admin.conf exists
  stat:
    path: /etc/kubernetes/admin.conf
  register: stat_k8s_result

- name: Start master node
  shell: "kubeadm init --pod-network-cidr=10.244.0.0/16"
  register: kubeadm_init
  when: inventory_hostname in groups['kubernetes_master'] and stat_k8s_result.stat.exists == False
  tags: init_kubernetes_master

- name: Generate join command from master
  shell: "kubeadm token create --print-join-command"
  register: kubeadm_join
  when: inventory_hostname in groups['kubernetes_master']
  tags: init_kubernetes_master

- name: Ensure node /etc/kubernetes is empty
  shell: "rm -rf /etc/kubernetes/*"
  when: inventory_hostname in groups['kubernetes_nodes']
  tags: purge_kubernetes_config_dir_nodes

- name: Register nodes with master
  shell: "{{ hostvars[groups['kubernetes_master'][0]].kubeadm_join.stdout_lines[-1] }}"
  when: inventory_hostname in groups['kubernetes_nodes']
  tags: register_nodes

- name: Get k8s version
  shell: "kubectl --kubeconfig /etc/kubernetes/admin.conf version | base64 -w 0"
  register: k8s_version
  when: inventory_hostname in groups['kubernetes_master']
  tags: get_k8s_version

- name: Copy kubectl admin config file to root user directory
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "/root/.kube/config"
    remote_src: true
    owner: root
    group: root
  when: inventory_hostname in groups['kubernetes_master']
  tags: copy_kubeconfig

#kubectl taint nodes --all node-role.kubernetes.io/master-
#Eable Master to deploy pods
- name: Eable Master to deploy pods
  shell: "kubectl taint nodes --all node-role.kubernetes.io/master-"
  when: inventory_hostname in groups['kubernetes_master'] and  master-taint is defined
  tags: enable_master_to_deploy_pods

- name: mkdir for cni
  file:
    path: /etc/kubernetes/cni
    state: directory

- name: Copy kube-flannel.yaml to kubernetes folder
  copy: 
    src: kube-flannel.yaml 
    dest: /etc/kubernetes/cni/kube-flannel.yaml
    mode: 0644
  when: flannel is defined

- name: Install overlay network
  shell: "kubectl apply -f /etc/kubernetes/cni/kube-flannel.yaml"
  when: inventory_hostname in groups['kubernetes_master'] and flannel is defined
  tags: install_weave_overlay_network
  

- name: Copy calico.yaml to kubernetes folder
  copy: 
    src: calico.yaml 
    dest: /etc/kubernetes/cni/calico.yaml
    mode: 0644
  when: calico is defined

- name: Copy rbac-kdd.yaml to kubernetes folder
  copy:
    src: rbac-kdd.yaml
    dest: /etc/kubernetes/cni/rbac-kdd.yaml
    mode: 0644
  when: calico is defined

- name: Install calico overlay network rbac
  shell: "kubectl apply -f /etc/kubernetes/cni/rbac-kdd.yaml"
  when: inventory_hostname in groups['kubernetes_master'] and calico is defined
  tags: install_weave_overlay_network

- name: Install calico overlay network
  shell: "kubectl apply -f /etc/kubernetes/cni/calico.yaml"
  when: inventory_hostname in groups['kubernetes_master'] and calico is defined
  tags: install_weave_overlay_network

- name: mkdir for ingress
  file:
    path: /etc/kubernetes/ingress
    state: directory

- name: Copy nginx-ingress.yaml to kubernetes folder
  copy:
    src: nginx-ingress.yaml
    dest: /etc/kubernetes/ingress/nginx-ingress.yaml
    mode: 0644
  when: ingress is defined

- name: Install ingress
  shell: "kubectl apply -f /etc/kubernetes/ingress/nginx-ingress.yaml"
  when: inventory_hostname in groups['kubernetes_master'] and ingress is defined
  tags: install_nginx_ingress
